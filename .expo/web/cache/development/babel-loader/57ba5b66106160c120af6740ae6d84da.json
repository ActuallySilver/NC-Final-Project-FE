{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { Input, Button } from \"react-native-elements\";\nimport { StackScreenProps } from \"@react-navigation/stack\";\nimport { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar auth = getAuth();\n\nvar SignUpScreen = function SignUpScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState({\n    email: \"\",\n    password: \"\",\n    error: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  function signUp() {\n    return _regeneratorRuntime.async(function signUp$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(value.email === \"\" || value.password === \"\")) {\n              _context.next = 3;\n              break;\n            }\n\n            setValue(_objectSpread(_objectSpread({}, value), {}, {\n              error: \"Email and password are mandatory.\"\n            }));\n            return _context.abrupt(\"return\");\n\n          case 3:\n            _context.prev = 3;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(createUserWithEmailAndPassword(auth, value.email, value.password));\n\n          case 6:\n            navigation.navigate(\"Sign In\");\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](3);\n            setValue(_objectSpread(_objectSpread({}, value), {}, {\n              error: _context.t0.message\n            }));\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 9]], Promise);\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Signup screen!\"\n    }), !!value.error && _jsx(View, {\n      style: styles.error,\n      children: _jsx(Text, {\n        children: value.error\n      })\n    }), _jsxs(View, {\n      style: styles.controls,\n      children: [_jsx(Input, {\n        placeholder: \"Email\",\n        containerStyle: styles.control,\n        value: value.email,\n        onChangeText: function onChangeText(text) {\n          return setValue(_objectSpread(_objectSpread({}, value), {}, {\n            email: text\n          }));\n        },\n        leftIcon: _jsx(Icon, {\n          name: \"envelope\",\n          size: 16\n        })\n      }), _jsx(Input, {\n        placeholder: \"Password\",\n        containerStyle: styles.control,\n        value: value.password,\n        onChangeText: function onChangeText(text) {\n          return setValue(_objectSpread(_objectSpread({}, value), {}, {\n            password: text\n          }));\n        },\n        secureTextEntry: true,\n        leftIcon: _jsx(Icon, {\n          name: \"key\",\n          size: 16\n        })\n      }), _jsx(Button, {\n        title: \"Sign up\",\n        buttonStyle: styles.control,\n        onPress: signUp\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 20,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  controls: {\n    flex: 1\n  },\n  control: {\n    marginTop: 10\n  },\n  error: {\n    marginTop: 10,\n    padding: 10,\n    color: \"#fff\",\n    backgroundColor: \"#D54826FF\"\n  }\n});\nexport default SignUpScreen;","map":{"version":3,"sources":["C:/Users/Jason/Documents/NorthCoders/THE project/frontend/screens/SignUp.jsx"],"names":["React","Icon","Input","Button","StackScreenProps","getAuth","createUserWithEmailAndPassword","auth","SignUpScreen","navigation","useState","email","password","error","value","setValue","signUp","navigate","message","styles","container","controls","control","text","StyleSheet","create","flex","paddingTop","backgroundColor","alignItems","justifyContent","marginTop","padding","color"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport Icon from \"react-native-vector-icons/FontAwesome\";\r\nimport { Input, Button } from \"react-native-elements\";\r\nimport { StackScreenProps } from \"@react-navigation/stack\";\r\nimport { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\r\n\r\nconst auth = getAuth();\r\nconst SignUpScreen = ({ navigation }) => {\r\n  const [value, setValue] = React.useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    error: \"\",\r\n  });\r\n\r\n  async function signUp() {\r\n    if (value.email === \"\" || value.password === \"\") {\r\n      setValue({\r\n        ...value,\r\n        error: \"Email and password are mandatory.\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await createUserWithEmailAndPassword(auth, value.email, value.password);\r\n      navigation.navigate(\"Sign In\");\r\n    } catch (error) {\r\n      setValue({\r\n        ...value,\r\n        error: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text>Signup screen!</Text>\r\n\r\n      {!!value.error && (\r\n        <View style={styles.error}>\r\n          <Text>{value.error}</Text>\r\n        </View>\r\n      )}\r\n\r\n      <View style={styles.controls}>\r\n        <Input\r\n          placeholder=\"Email\"\r\n          containerStyle={styles.control}\r\n          value={value.email}\r\n          onChangeText={(text) => setValue({ ...value, email: text })}\r\n          leftIcon={<Icon name=\"envelope\" size={16} />}\r\n        />\r\n\r\n        <Input\r\n          placeholder=\"Password\"\r\n          containerStyle={styles.control}\r\n          value={value.password}\r\n          onChangeText={(text) => setValue({ ...value, password: text })}\r\n          secureTextEntry={true}\r\n          leftIcon={<Icon name=\"key\" size={16} />}\r\n        />\r\n\r\n        <Button title=\"Sign up\" buttonStyle={styles.control} onPress={signUp} />\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    paddingTop: 20,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  controls: {\r\n    flex: 1,\r\n  },\r\n\r\n  control: {\r\n    marginTop: 10,\r\n  },\r\n\r\n  error: {\r\n    marginTop: 10,\r\n    padding: 10,\r\n    color: \"#fff\",\r\n    backgroundColor: \"#D54826FF\",\r\n  },\r\n});\r\n\r\nexport default SignUpScreen;\r\n"]},"metadata":{},"sourceType":"module"}